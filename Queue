from collections import *
class Queue:
    def __init__(self):
        self.buffer = deque()

    def enqueue(self, val):
        self.buffer.appendleft(val)

    def dequeue(self):
        return self.buffer.pop()

    def size(self):
        return len(self.buffer)

    def is_empty(self):
        return len(self.buffer) == 0


pq = Queue()

pq.enqueue({
    'company': 'Wal Mart',
    'timestamp': '21 sep, 11.01 AM',
    'price': 131.10
})
pq.enqueue({
    'company': 'Wal Mart',
    'timestamp': '21 sep, 11.02 AM',
    'price': 132
})
pq.enqueue({
    'company': 'Wal Mart',
    'timestamp': '21 sep, 11.03 AM',
    'price': 135
})

import time
import threading

food_serving = Queue()

def place_order(orders):
    for order in orders:
        print(f"Placing an order: {order}")
        food_serving.enqueue(order)
        time.sleep(0.5)

def serving_food():
    time.sleep(1)
    while True:
        order = food_serving.dequeue()
        print(f"Now serving food:{order}")
        time.sleep(2)

orders = ['pizza','samosa','pasta','biryani','burger']
t1 = threading.Thread(target=place_order, args=(orders,))
t2 = threading.Thread(target=serving_food)

t1.start()
t2.start()
