class Node:
    def __init__(self, data=None, nxt=None):  # Correct the typo here
        self.data = data
        self.nxt = nxt


class Linkedlist:
    def __init__(self):
        self.head = None

    def insert_at_beginning(self, data):
        node = Node(data, self.head)
        self.head = node

    def insert_at_the_end(self,data):
        if self.head is None:
            self.head = Node(data, None)
            return
        itr = self.head
        while itr.nxt:
            itr = itr.nxt
        itr.nxt = Node(data,None)

    def insert_values(self,data_list):
        self.head = None
        for val in data_list:
            self.insert_at_the_end(val)

    def get_count(self):
        itr = self.head
        count = 0
        while itr:
            count +=1
            itr=itr.nxt
        print(count)
        return count

    def remove_at_index(self, index):
        if index <0 or index >= self.get_count():
            raise Exception('Invalid index')
        if index == 0:
            self.head = self.head.nxt
            return
        count = 0
        itr = self.head
        while itr:
            if count == index-1:
                itr.nxt = itr.nxt.nxt
                break
            itr = itr.nxt
            count += 1

    def remove_by_value(self,data):
        if self.head is None:
            return

        if self.head.data == data:
            self.head = self.head.nxt

        itr = self.head
        while itr.nxt:
            if itr.nxt.data == data:
                itr.nxt = itr.nxt.nxt
                break
            itr = itr.nxt

    def insert_at(self, index, data):
        if index<0 or index>self.get_count():
            raise Exception("Invalid Index")

        if index == 0:
            self.insert_at_beginning(data)
            return

        count = 0
        itr = self.head
        while itr:
            if count == index - 1:
                node = Node(data, itr.nxt)
                itr.nxt = node
                break

            itr = itr.nxt
            count += 1



    def print(self):
        if self.head is None:
            print('Empty Node')
            return
        itr = self.head
        llstr = ''  # Changed the variable name to be more meaningful
        while itr:
            llstr += str(itr.data) + '-->'
            itr = itr.nxt  # Correct the attribute name here
        print(llstr)  # Print the string instead of returning


ll = Linkedlist()
ll.insert_at_beginning(5)
ll.insert_at_beginning(69)
ll.insert_at_the_end(97)
ll.insert_values(["v", 'i', 'n', 'a', 'y'])
ll.remove_by_value('i')
ll.print()
